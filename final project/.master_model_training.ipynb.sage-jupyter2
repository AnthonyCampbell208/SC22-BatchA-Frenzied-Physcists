{"backend_state":"init","connection_file":"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/share/jupyter/runtime/kernel-3f2ac9a2-d230-48bc-a5be-af2688ddc768.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"083f19","input":"logreg = LogisticRegression(class_weight=\"balanced\")\nlogreg.fit(X_train,y_train)\ny_pred_lr = logreg.predict(X_test)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred_lr))\nprint(\"Precision:\", metrics.precision_score(y_test, y_pred_lr))\nprint(\"Recall:\", metrics.recall_score(y_test, y_pred_lr))\nprint(\"F1 Score:\", metrics.f1_score(y_test, y_pred_lr))\ncm = confusion_matrix(y_test, y_pred_lr, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ndisp.plot()","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"340e8c","input":"svc_pred","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3a3741","input":"knn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(X_train, y_train)\ny_pred_knn = knn.predict(X_test)\nacc_knn = metrics.accuracy_score(y_test,knn_pred)\nprint(\"KNN Model Acuuracy is:\", acc_knn)\nprint(\"Precision:\", metrics.precision_score(y_test, y_pred_knn))\nprint(\"Recall:\", metrics.recall_score(y_test, y_pred_knn))\nprint(\"F1 Score:\", metrics.f1_score(y_test, y_pred_knn))\ncm = confusion_matrix(y_test, y_pred_knn, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ndisp.plot()","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"504352","input":"","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5ce127","input":"# Support Vector Classifier \nsvc = SVC(random_state = 42)\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)\nacc_svc = svc.score(X_test, y_test)\nprint(\"SVC Accuracy score is:\", acc_svc)\nprint(\"Precision:\", metrics.precision_score(y_test, svc_pred))\nprint(\"Recall:\", metrics.recall_score(y_test, svc_pred))\nprint(\"F1 Score:\", metrics.f1_score(y_test, svc_pred))\ncm = confusion_matrix(y_test, svc_pred, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ndisp.plot()\n\n\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']}\n\nclf = GridSearchCV(tree_clf, parameters)\nclf.fit(X_train, y_train)\n\n\nsorted(clf.cv_results_.keys())","pos":39,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6743d3","input":"print(clf_rf_gs.best_params_)","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"82d623","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8942e0","input":"list(set(y_pred_lr))","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a6bbba","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c5c14c","input":"clf_rf = RandomForestClassifier()\nparam_grid = {\n    'n_estimators': [150, 200, 250],\n    'max_features': ['sqrt', 'log2'],\n    'max_depth' : [1,2,3,4,5,6,7],\n    'criterion' :['gini', 'entropy']}\nclf_rf_gs = GridSearchCV(clf_rf, param_grid)\nclf_rf_gs.fit(X_train,y_train)","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d56992","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fff3df","input":"from sklearn import svm\nfrom sklearn.model_selection import GridSearchCV\nclf_rf = RandomForestClassifier(random_state=42, max_features='sqrt', n_estimators= 200, max_depth=4, criterion='gini')\nclf_rf = clf_rf.fit(X_train,y_train)\ny_pred_rf = clf_rf.predict(X_test)\nacc_rf = metrics.accuracy_score(y_test, y_pred_rf)\nprint('Testing-set Accuracy score is:', acc_rf)\n#print(\"Precision:\", metrics.precision_score(y_test, y_pred_rf))\nprint(\"Recall:\", metrics.recall_score(y_test, y_pred_rf))\nprint(\"F1 Score:\", metrics.f1_score(y_test, y_pred_rf))\ncm = confusion_matrix(y_test, y_pred_rf, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=tree_clf.classes_)\ndisp.plot()","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"3e5a0d","input":"import pandas as pd\nimport plotly.express as px\n# So this isn't stratified\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"c43e61","input":"stroke_df = pd.read_csv(\"./Data/healthcare-dataset-stroke-data.csv\")\n\n# https://www.kaggle.com/datasets/fedesoriano/stroke-prediction-dataset","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"8a30b2","input":"stroke_df.head(20)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9046</td>\n      <td>Male</td>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>formerly smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>51676</td>\n      <td>Female</td>\n      <td>61.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>202.21</td>\n      <td>NaN</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60182</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1665</td>\n      <td>Female</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>56669</td>\n      <td>Male</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>186.21</td>\n      <td>29.0</td>\n      <td>formerly smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>53882</td>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10434</td>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>27419</td>\n      <td>Female</td>\n      <td>59.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>76.15</td>\n      <td>NaN</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>60491</td>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>12109</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12095</td>\n      <td>Female</td>\n      <td>61.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Rural</td>\n      <td>120.46</td>\n      <td>36.8</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>12175</td>\n      <td>Female</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>104.51</td>\n      <td>27.3</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>8213</td>\n      <td>Male</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>219.84</td>\n      <td>NaN</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>5317</td>\n      <td>Female</td>\n      <td>79.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>214.09</td>\n      <td>28.2</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>58202</td>\n      <td>Female</td>\n      <td>50.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>167.41</td>\n      <td>30.9</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>56112</td>\n      <td>Male</td>\n      <td>64.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>191.61</td>\n      <td>37.5</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>34120</td>\n      <td>Male</td>\n      <td>75.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>221.29</td>\n      <td>25.8</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>27458</td>\n      <td>Female</td>\n      <td>60.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>89.22</td>\n      <td>37.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>25226</td>\n      <td>Male</td>\n      <td>57.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>No</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>217.08</td>\n      <td>NaN</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       id  gender   age  hypertension  heart_disease ever_married  \\\n0    9046    Male  67.0             0              1          Yes   \n1   51676  Female  61.0             0              0          Yes   \n2   31112    Male  80.0             0              1          Yes   \n3   60182  Female  49.0             0              0          Yes   \n4    1665  Female  79.0             1              0          Yes   \n5   56669    Male  81.0             0              0          Yes   \n6   53882    Male  74.0             1              1          Yes   \n7   10434  Female  69.0             0              0           No   \n8   27419  Female  59.0             0              0          Yes   \n9   60491  Female  78.0             0              0          Yes   \n10  12109  Female  81.0             1              0          Yes   \n11  12095  Female  61.0             0              1          Yes   \n12  12175  Female  54.0             0              0          Yes   \n13   8213    Male  78.0             0              1          Yes   \n14   5317  Female  79.0             0              1          Yes   \n15  58202  Female  50.0             1              0          Yes   \n16  56112    Male  64.0             0              1          Yes   \n17  34120    Male  75.0             1              0          Yes   \n18  27458  Female  60.0             0              0           No   \n19  25226    Male  57.0             0              1           No   \n\n        work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0         Private          Urban             228.69  36.6  formerly smoked   \n1   Self-employed          Rural             202.21   NaN     never smoked   \n2         Private          Rural             105.92  32.5     never smoked   \n3         Private          Urban             171.23  34.4           smokes   \n4   Self-employed          Rural             174.12  24.0     never smoked   \n5         Private          Urban             186.21  29.0  formerly smoked   \n6         Private          Rural              70.09  27.4     never smoked   \n7         Private          Urban              94.39  22.8     never smoked   \n8         Private          Rural              76.15   NaN          Unknown   \n9         Private          Urban              58.57  24.2          Unknown   \n10        Private          Rural              80.43  29.7     never smoked   \n11       Govt_job          Rural             120.46  36.8           smokes   \n12        Private          Urban             104.51  27.3           smokes   \n13        Private          Urban             219.84   NaN          Unknown   \n14        Private          Urban             214.09  28.2     never smoked   \n15  Self-employed          Rural             167.41  30.9     never smoked   \n16        Private          Urban             191.61  37.5           smokes   \n17        Private          Urban             221.29  25.8           smokes   \n18        Private          Urban              89.22  37.8     never smoked   \n19       Govt_job          Urban             217.08   NaN          Unknown   \n\n    stroke  \n0        1  \n1        1  \n2        1  \n3        1  \n4        1  \n5        1  \n6        1  \n7        1  \n8        1  \n9        1  \n10       1  \n11       1  \n12       1  \n13       1  \n14       1  \n15       1  \n16       1  \n17       1  \n18       1  \n19       1  "},"exec_count":28,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"609e8c","input":"stroke_df.isnull()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5105</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5106</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5107</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5108</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5109</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5110 rows × 12 columns</p>\n</div>","text/plain":"         id  gender    age  hypertension  heart_disease  ever_married  \\\n0     False   False  False         False          False         False   \n1     False   False  False         False          False         False   \n2     False   False  False         False          False         False   \n3     False   False  False         False          False         False   \n4     False   False  False         False          False         False   \n...     ...     ...    ...           ...            ...           ...   \n5105  False   False  False         False          False         False   \n5106  False   False  False         False          False         False   \n5107  False   False  False         False          False         False   \n5108  False   False  False         False          False         False   \n5109  False   False  False         False          False         False   \n\n      work_type  Residence_type  avg_glucose_level    bmi  smoking_status  \\\n0         False           False              False  False           False   \n1         False           False              False   True           False   \n2         False           False              False  False           False   \n3         False           False              False  False           False   \n4         False           False              False  False           False   \n...         ...             ...                ...    ...             ...   \n5105      False           False              False   True           False   \n5106      False           False              False  False           False   \n5107      False           False              False  False           False   \n5108      False           False              False  False           False   \n5109      False           False              False  False           False   \n\n      stroke  \n0      False  \n1      False  \n2      False  \n3      False  \n4      False  \n...      ...  \n5105   False  \n5106   False  \n5107   False  \n5108   False  \n5109   False  \n\n[5110 rows x 12 columns]"},"exec_count":29,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"f06d6f","input":"stroke_df.isnull().sum()","output":{"0":{"data":{"text/plain":"id                     0\ngender                 0\nage                    0\nhypertension           0\nheart_disease          0\never_married           0\nwork_type              0\nResidence_type         0\navg_glucose_level      0\nbmi                  201\nsmoking_status         0\nstroke                 0\ndtype: int64"},"exec_count":30,"output_type":"execute_result"}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"a1f6d5","input":"stroke_df.duplicated().value_counts()","output":{"0":{"data":{"text/plain":"False    5110\ndtype: int64"},"exec_count":31,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"25429b","input":"stroke_df = stroke_df.dropna(axis=0)","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"03727d","input":"stroke_df.gender.value_counts()","output":{"0":{"data":{"text/plain":"Female    2897\nMale      2011\nOther        1\nName: gender, dtype: int64"},"exec_count":33,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"34f581","input":"print(stroke_df.columns)","output":{"0":{"name":"stdout","output_type":"stream","text":"Index(['id', 'gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')\n"}},"pos":8,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"8ce659","input":"# This is how many (rows, columns) there are\nstroke_df.shape","output":{"0":{"data":{"text/plain":"(4909, 12)"},"exec_count":35,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"21b69b","input":"clean_stroke_df = pd.get_dummies(stroke_df, columns=['gender','ever_married','work_type','Residence_type','smoking_status']) #Other columns here\nclean_stroke_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n      <th>gender_Female</th>\n      <th>gender_Male</th>\n      <th>gender_Other</th>\n      <th>...</th>\n      <th>work_type_Never_worked</th>\n      <th>work_type_Private</th>\n      <th>work_type_Self-employed</th>\n      <th>work_type_children</th>\n      <th>Residence_type_Rural</th>\n      <th>Residence_type_Urban</th>\n      <th>smoking_status_Unknown</th>\n      <th>smoking_status_formerly smoked</th>\n      <th>smoking_status_never smoked</th>\n      <th>smoking_status_smokes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9046</td>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31112</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60182</td>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1665</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>56669</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>186.21</td>\n      <td>29.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>","text/plain":"      id   age  hypertension  heart_disease  avg_glucose_level   bmi  stroke  \\\n0   9046  67.0             0              1             228.69  36.6       1   \n2  31112  80.0             0              1             105.92  32.5       1   \n3  60182  49.0             0              0             171.23  34.4       1   \n4   1665  79.0             1              0             174.12  24.0       1   \n5  56669  81.0             0              0             186.21  29.0       1   \n\n   gender_Female  gender_Male  gender_Other  ...  work_type_Never_worked  \\\n0              0            1             0  ...                       0   \n2              0            1             0  ...                       0   \n3              1            0             0  ...                       0   \n4              1            0             0  ...                       0   \n5              0            1             0  ...                       0   \n\n   work_type_Private  work_type_Self-employed  work_type_children  \\\n0                  1                        0                   0   \n2                  1                        0                   0   \n3                  1                        0                   0   \n4                  0                        1                   0   \n5                  1                        0                   0   \n\n   Residence_type_Rural  Residence_type_Urban  smoking_status_Unknown  \\\n0                     0                     1                       0   \n2                     1                     0                       0   \n3                     0                     1                       0   \n4                     1                     0                       0   \n5                     0                     1                       0   \n\n   smoking_status_formerly smoked  smoking_status_never smoked  \\\n0                               1                            0   \n2                               0                            1   \n3                               0                            0   \n4                               0                            1   \n5                               1                            0   \n\n   smoking_status_smokes  \n0                      0  \n2                      0  \n3                      1  \n4                      0  \n5                      0  \n\n[5 rows x 23 columns]"},"exec_count":36,"output_type":"execute_result"}},"pos":10,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"404cf2","input":"clean_stroke_df = clean_stroke_df.drop(['id'], axis=1)\nclean_stroke_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n      <th>gender_Female</th>\n      <th>gender_Male</th>\n      <th>gender_Other</th>\n      <th>ever_married_No</th>\n      <th>...</th>\n      <th>work_type_Never_worked</th>\n      <th>work_type_Private</th>\n      <th>work_type_Self-employed</th>\n      <th>work_type_children</th>\n      <th>Residence_type_Rural</th>\n      <th>Residence_type_Urban</th>\n      <th>smoking_status_Unknown</th>\n      <th>smoking_status_formerly smoked</th>\n      <th>smoking_status_never smoked</th>\n      <th>smoking_status_smokes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>186.21</td>\n      <td>29.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>","text/plain":"    age  hypertension  heart_disease  avg_glucose_level   bmi  stroke  \\\n0  67.0             0              1             228.69  36.6       1   \n2  80.0             0              1             105.92  32.5       1   \n3  49.0             0              0             171.23  34.4       1   \n4  79.0             1              0             174.12  24.0       1   \n5  81.0             0              0             186.21  29.0       1   \n\n   gender_Female  gender_Male  gender_Other  ever_married_No  ...  \\\n0              0            1             0                0  ...   \n2              0            1             0                0  ...   \n3              1            0             0                0  ...   \n4              1            0             0                0  ...   \n5              0            1             0                0  ...   \n\n   work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n0                       0                  1                        0   \n2                       0                  1                        0   \n3                       0                  1                        0   \n4                       0                  0                        1   \n5                       0                  1                        0   \n\n   work_type_children  Residence_type_Rural  Residence_type_Urban  \\\n0                   0                     0                     1   \n2                   0                     1                     0   \n3                   0                     0                     1   \n4                   0                     1                     0   \n5                   0                     0                     1   \n\n   smoking_status_Unknown  smoking_status_formerly smoked  \\\n0                       0                               1   \n2                       0                               0   \n3                       0                               0   \n4                       0                               0   \n5                       0                               1   \n\n   smoking_status_never smoked  smoking_status_smokes  \n0                            0                      0  \n2                            1                      0  \n3                            0                      1  \n4                            1                      0  \n5                            0                      0  \n\n[5 rows x 22 columns]"},"exec_count":37,"output_type":"execute_result"}},"pos":11,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"0ba315","input":"print(clean_stroke_df.columns)","output":{"0":{"name":"stdout","output_type":"stream","text":"Index(['age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi',\n       'stroke', 'gender_Female', 'gender_Male', 'gender_Other',\n       'ever_married_No', 'ever_married_Yes', 'work_type_Govt_job',\n       'work_type_Never_worked', 'work_type_Private',\n       'work_type_Self-employed', 'work_type_children', 'Residence_type_Rural',\n       'Residence_type_Urban', 'smoking_status_Unknown',\n       'smoking_status_formerly smoked', 'smoking_status_never smoked',\n       'smoking_status_smokes'],\n      dtype='object')\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"f0c2a9","input":"feature_columns = list(clean_stroke_df.columns)\nfeature_columns.remove('stroke')\ny_column = 'stroke'\n","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"97a0fc","input":"X = clean_stroke_df[feature_columns]\nX.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>gender_Female</th>\n      <th>gender_Male</th>\n      <th>gender_Other</th>\n      <th>ever_married_No</th>\n      <th>ever_married_Yes</th>\n      <th>...</th>\n      <th>work_type_Never_worked</th>\n      <th>work_type_Private</th>\n      <th>work_type_Self-employed</th>\n      <th>work_type_children</th>\n      <th>Residence_type_Rural</th>\n      <th>Residence_type_Urban</th>\n      <th>smoking_status_Unknown</th>\n      <th>smoking_status_formerly smoked</th>\n      <th>smoking_status_never smoked</th>\n      <th>smoking_status_smokes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>186.21</td>\n      <td>29.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>","text/plain":"    age  hypertension  heart_disease  avg_glucose_level   bmi  gender_Female  \\\n0  67.0             0              1             228.69  36.6              0   \n2  80.0             0              1             105.92  32.5              0   \n3  49.0             0              0             171.23  34.4              1   \n4  79.0             1              0             174.12  24.0              1   \n5  81.0             0              0             186.21  29.0              0   \n\n   gender_Male  gender_Other  ever_married_No  ever_married_Yes  ...  \\\n0            1             0                0                 1  ...   \n2            1             0                0                 1  ...   \n3            0             0                0                 1  ...   \n4            0             0                0                 1  ...   \n5            1             0                0                 1  ...   \n\n   work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n0                       0                  1                        0   \n2                       0                  1                        0   \n3                       0                  1                        0   \n4                       0                  0                        1   \n5                       0                  1                        0   \n\n   work_type_children  Residence_type_Rural  Residence_type_Urban  \\\n0                   0                     0                     1   \n2                   0                     1                     0   \n3                   0                     0                     1   \n4                   0                     1                     0   \n5                   0                     0                     1   \n\n   smoking_status_Unknown  smoking_status_formerly smoked  \\\n0                       0                               1   \n2                       0                               0   \n3                       0                               0   \n4                       0                               0   \n5                       0                               1   \n\n   smoking_status_never smoked  smoking_status_smokes  \n0                            0                      0  \n2                            1                      0  \n3                            0                      1  \n4                            1                      0  \n5                            0                      0  \n\n[5 rows x 21 columns]"},"exec_count":40,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"d228d5","input":"y = clean_stroke_df[y_column]\ny.head()","output":{"0":{"data":{"text/plain":"0    1\n2    1\n3    1\n4    1\n5    1\nName: stroke, dtype: int64"},"exec_count":41,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"1b6a2e","input":"# from sklearn.preprocessing import StandardScaler\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.2, random_state=42)\n\ny_train.value_counts() \n","output":{"0":{"data":{"text/plain":"0    3771\n1     156\nName: stroke, dtype: int64"},"exec_count":42,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"d264ce","input":"X_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.2, random_state=42, stratify=y)\n\n# So I just was being silly it's not true or false you have to tell what you're stratifying on so you stratify on y and you can see that the y_train \n# Now has a 80/20 split","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"cf05b7","input":"# This one is stratified\ny_train.value_counts()","output":{"0":{"data":{"text/plain":"0    3760\n1     167\nName: stroke, dtype: int64"},"exec_count":44,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"b6712c","input":"y_test.value_counts()","output":{"0":{"data":{"text/plain":"0    940\n1     42\nName: stroke, dtype: int64"},"exec_count":45,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"1b3206","input":"from sklearn import tree\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay\n\ntree_clf = tree.DecisionTreeClassifier()\ntree_clf = tree_clf.fit(X_train, y_train)\ny_pred_tree = tree_clf.predict(X_test)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", metrics.precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", metrics.recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", metrics.f1_score(y_test, y_pred_tree))\ncm = confusion_matrix(y_test, y_pred_tree, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=tree_clf.classes_)\ndisp.plot()\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm, datasets\nparameters = {'criterion' :['gini', 'entropy'],\n              'max_features' :['sqrt', 'log2'],\n              'max_depth' :range(1,10),\n              'min_samples_split' :range(1,10),\n              'min_samples_leaf' :range(1,10)} \nclf = GridSearchCV(tree_clf, parameters)\nclf.fit(X_train, y_train)","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy: 0.9226069246435845\nPrecision: 0.09523809523809523\nRecall: 0.09523809523809523\nF1 Score: 0.09523809523809523\n"},"1":{"name":"stderr","output_type":"stream","text":"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n1620 fits failed out of a total of 14580.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n1620 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 265, in fit\n    check_scalar(\n  File \"/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_samples_split == 1, must be >= 2.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/projects/4ecc52f5-f80b-4322-9a0d-563e88b9d2a6/.local/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning: One or more of the test scores are non-finite: [       nan 0.95747427 0.95747427 ... 0.95518095 0.95543735 0.95671026]\n  warnings.warn(\n"},"2":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                         &#x27;max_depth&#x27;: range(1, 10),\n                         &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n                         &#x27;min_samples_leaf&#x27;: range(1, 10),\n                         &#x27;min_samples_split&#x27;: range(1, 10)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                         &#x27;max_depth&#x27;: range(1, 10),\n                         &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n                         &#x27;min_samples_leaf&#x27;: range(1, 10),\n                         &#x27;min_samples_split&#x27;: range(1, 10)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={'criterion': ['gini', 'entropy'],\n                         'max_depth': range(1, 10),\n                         'max_features': ['sqrt', 'log2'],\n                         'min_samples_leaf': range(1, 10),\n                         'min_samples_split': range(1, 10)})"},"exec_count":46,"output_type":"execute_result"},"3":{"data":{"image/png":"7d2b89a496e4b735fb4a0113652e01383b5afb1d","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":46,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"5d278a","input":"print(clf.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt', 'min_samples_leaf': 9, 'min_samples_split': 8}\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"94cb1c","input":"tree_clf = tree.DecisionTreeClassifier (criterion'gini',max_depth= 6, max_features= 'sqrt', min_samples_leaf = 5, min_samples_split= 3)\ntree_clf = tree_clf.fit(X_train, y_train)\ny_pred_tree = tree_clf.predict(X_test)\nparam_dict = {\n    \"criterion\":['gini','entropy'],\n    \"max_depth\":range(1,10),\n    \"min_samples_split\":range(1,10),\n    \"min_samples_leaf\":range(1,5)   \n}\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", metrics.precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", metrics.recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", metrics.f1_score(y_test, y_pred_tree))\ncm = confusion_matrix(y_test, y_pred_tree, labels=tree_clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=tree_clf.classes_)\ndisp.plot()\n\n\n","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (3535954796.py, line 1)","output_type":"error","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [48]\u001b[0;36m\u001b[0m\n\u001b[0;31m    tree_clf = tree.DecisionTreeClassifier (criterion'gini',max_depth= 6, max_features= 'sqrt', min_samples_leaf = 5, min_samples_split= 3)\u001b[0m\n\u001b[0m                                                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"e57db2","input":"from matplotlib import pyplot as plt\ntree_clf = tree.DecisionTreeClassifier(max_depth=4)\ntree_clf = tree_clf.fit(X_train, y_train)\ny_pred = tree_clf.predict(X_test)\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(tree_clf, \n                   feature_names=feature_columns,  \n                   class_names=['Not Stroke','Stroke'],\n                   filled=True, fontsize=10)\n","output":{"0":{"data":{"image/png":"db4a8bd7795f8f5a6358326d6ba53ff628f8d3da","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"exec_count":49,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"0f57ec","input":"Our second decision tree classifier is much like our first. Note that our Output is slightly different from the first dtc. Data issues still prominent.\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"218725","input":"This decision tree shows us what our coding from earlier described. Each of the boxes show important data like, for instance, at the to it says \"age is less than or equal to 67.5\" if this is true than the patient will move to the left, and if it is false it will go to the right, it will then follow this patters of \"x is less than or equal to y\" until we reach the bottom.  Also you can see that each of the boxes are colored orange or blue, if it is collared blue than that patient in out data had a stroke whereas if it is orange they did not have a stroke.\n\n","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"3eb13c","input":"A **decision tree classifier** is a form of classifier that maps differences and categories of data for the purpose of easily visualizing it. More importantly, they are able to capture decision\\-making knowledge from supplied data, making this type of classifier a good fit. Important parameters include:\n\n- <u>Criterion</u>: This feature mesaures the quality of the split, or in other words determines if the division of data is appropriate. In this model, 'gini' refers to gini impurity and entropy refers to the shannon information gain. \n- <u>Max features</u>: This refers to the strategy used to find the best split at a node. \n- <u>Max depth</u>: Setting a max depth limits the number of branches that your tree can have. This can be helpful if there are various variables and a lot of data that could result in an incoherent and unreadable tree. By setting max depths \\(say four or five branches\\) your tree is forced to display only th\n- \n- \n\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"41eb9b","input":"We used logistic regression to predict \nand categorize dependent variable \n\\(stroke\\)\nand using a \nset of independent variable \\(age, health conditions\\) to determine a binary out\ncome \nsuch as yes or no. \n\n","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"7fa1dd","input":"We tried using the Support Vector Classifier which uses classification algorithms for our two groups.  SVC puts the data into a hyperplane which separates our 'stroke' and 'no stroke' data with a decision boundary line. For our parameters we applied rbf kernel and gamma which helps with non linear classifier while the C parameter trades off correct classification of training examples against maximization of the boundary line. Our accuracy score is pretty high but we weren't able to get scores for metrics such as precision, recall, or F1 score. Unfortunately, since our data is unbalanced we could not seem to find any parameters that were a \"best fit\" when we applied grid search. \n\n","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"859892","input":"By using a random forest classifier, \n","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"942d7a","input":"In the following lines of code, F.P. utilized five different classifiers to train our data. We used _GridsearchCV_ for hyper\\-parameter tuning, enabling us to find the best combinations of paramaters to **best** classify our data. \n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"a1105b","input":"Here, the Frenzied Physicists split our data on Stroke victims into X and Y, with <u>x being patient traits </u>and <u>y being if they had a stroke or not</u>. We then divided up all of our data into an 80:20 ratio., with the <u>80% being our training data</u> and the <u>20% being our testing data</u>. One challenge we faced when dividing the data was that because our percentage of stroke victims compared to non\\-stroke victims was so small, we risked grouping all of our stroke victims into the testing data and creating a training dataset that consisted of mostly non\\-stroke victims. To ensure that the ratio remained consistent,  we **stratified** our data. Stratifying data is like shrinking down your data size rather than cutting it. When you cut a piece of a picture to fit in in a frame, you risk losing important details. However, shrinking your picture preserves just shrinks your data, losing precise details but maintaining the general picture. \n\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"bf3446","input":"SUHAS/ESMERALDA`","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"c5fe24","input":"K Nearest Neighbor classifies what where new data belongs between two groups based its \"neighbors.\" This entails means the points of data the new data is closest to and making a vote. The closest points on each side each count as a vote so the new data will be classified with the group that has more votes.\n","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"d6d509","input":"","pos":23,"type":"cell"}
{"id":0,"time":1655472516986,"type":"user"}
{"last_load":1655472515894,"type":"file"}